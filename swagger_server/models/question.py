# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.option import Option  # noqa: F401,E501
from swagger_server import util


class Question(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, question_index: int=None, template_id: int=None, created_at: str=None, last_modify: str=None, description: str=None, type: str=None, options: List[Option]=None):  # noqa: E501
        """Question - a model defined in Swagger

        :param id: The id of this Question.  # noqa: E501
        :type id: int
        :param question_index: The question_index of this Question.  # noqa: E501
        :type question_index: int
        :param template_id: The template_id of this Question.  # noqa: E501
        :type template_id: int
        :param created_at: The created_at of this Question.  # noqa: E501
        :type created_at: str
        :param last_modify: The last_modify of this Question.  # noqa: E501
        :type last_modify: str
        :param description: The description of this Question.  # noqa: E501
        :type description: str
        :param type: The type of this Question.  # noqa: E501
        :type type: str
        :param options: The options of this Question.  # noqa: E501
        :type options: List[Option]
        """
        self.swagger_types = {
            'id': int,
            'question_index': int,
            'template_id': int,
            'created_at': str,
            'last_modify': str,
            'description': str,
            'type': str,
            'options': List[Option]
        }

        self.attribute_map = {
            'id': 'id',
            'question_index': 'questionIndex',
            'template_id': 'templateId',
            'created_at': 'createdAt',
            'last_modify': 'lastModify',
            'description': 'description',
            'type': 'type',
            'options': 'options'
        }
        self._id = id
        self._question_index = question_index
        self._template_id = template_id
        self._created_at = created_at
        self._last_modify = last_modify
        self._description = description
        self._type = type
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Question.


        :return: The id of this Question.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Question.


        :param id: The id of this Question.
        :type id: int
        """

        self._id = id

    @property
    def question_index(self) -> int:
        """Gets the question_index of this Question.


        :return: The question_index of this Question.
        :rtype: int
        """
        return self._question_index

    @question_index.setter
    def question_index(self, question_index: int):
        """Sets the question_index of this Question.


        :param question_index: The question_index of this Question.
        :type question_index: int
        """

        self._question_index = question_index

    @property
    def template_id(self) -> int:
        """Gets the template_id of this Question.


        :return: The template_id of this Question.
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: int):
        """Sets the template_id of this Question.


        :param template_id: The template_id of this Question.
        :type template_id: int
        """

        self._template_id = template_id

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Question.


        :return: The created_at of this Question.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Question.


        :param created_at: The created_at of this Question.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def last_modify(self) -> str:
        """Gets the last_modify of this Question.


        :return: The last_modify of this Question.
        :rtype: str
        """
        return self._last_modify

    @last_modify.setter
    def last_modify(self, last_modify: str):
        """Sets the last_modify of this Question.


        :param last_modify: The last_modify of this Question.
        :type last_modify: str
        """

        self._last_modify = last_modify

    @property
    def description(self) -> str:
        """Gets the description of this Question.


        :return: The description of this Question.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Question.


        :param description: The description of this Question.
        :type description: str
        """

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this Question.

        the question type  # noqa: E501

        :return: The type of this Question.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Question.

        the question type  # noqa: E501

        :param type: The type of this Question.
        :type type: str
        """
        allowed_values = ["text", "single", "multiple"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def options(self) -> List[Option]:
        """Gets the options of this Question.


        :return: The options of this Question.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options: List[Option]):
        """Sets the options of this Question.


        :param options: The options of this Question.
        :type options: List[Option]
        """

        self._options = options
