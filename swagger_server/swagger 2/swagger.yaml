openapi: 3.0.0
info:
  title: TAOS API
  description: |
    Accounting firms need to collect detailed information on a client’s tax situation to prepare return on the client’s behalf. They currently send PDFs (like a form) with their own questions to clients via email. Moreover, it requires clients printing out PDFs, writing answers using pen, scanning and sending them back. This approach is simple but yet insecure and requires a lot of repeated efforts. This doc proposes a design for digitalize this process and provide a simplified streamlined solution for both clients and the accounting firms.
  contact:
    email: cli94@wisc.edu
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/lichao0817/TAOS/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: owners
  description: Everything about accounting firm users.
- name: clients
  description: Everything about accounting firm clients.
paths:
  /owners/{ownerId}/clients/{clientId}/forms:
    get:
      tags:
      - owners
      summary: Find all the assigned forms and their status for clients
      operationId: find_all_assignments_for_client
      parameters:
      - name: ownerId
        in: path
        description: ID of owner
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: clientId
        in: path
        description: ID of client
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormAssignment'
                x-content-type: application/json
        "400":
          description: Invalid IDs supplied
      x-openapi-router-controller: swagger_server.controllers.owners_controller
    post:
      tags:
      - owners
      summary: Assign new forms to client
      operationId: assign_new_forms_to_client
      parameters:
      - name: ownerId
        in: path
        description: ID of owner
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: clientId
        in: path
        description: ID of client
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Assign new forms to client with an arry of form IDs in the request
          body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientId_forms_body'
        required: true
      responses:
        "501":
          description: Not implemented
      x-openapi-router-controller: swagger_server.controllers.owners_controller
  /owners/{ownerId}/templates:
    get:
      tags:
      - owners
      summary: Find a summary list of all form templates for an owner
      description: Returns a summary only and does not include details of questions
      operationId: get_all_forms_for_owner
      parameters:
      - name: ownerId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormTemplate'
                x-content-type: application/json
        "400":
          description: Invalid ID supplied
      x-openapi-router-controller: swagger_server.controllers.owners_controller
    post:
      tags:
      - owners
      summary: Add a form for owner (accounting firm)
      operationId: add_form
      parameters:
      - name: ownerId
        in: path
        description: ID of form to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Add a new form template of questions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormTemplate'
            example:
              ownerId: 1
              title: This is a new tax form template
              description: This is a new tax form template description
              questions:
              - questionIndex: 1
                description: This is the first question. And it is free text.
                type: text
              - questionIndex: 2
                description: This is the second question. And it is single choice.
                type: single
                options:
                - optionIndex: A
                  description: This is option A
                - optionIndex: B
                  description: This is option B
                - optionIndex: C
                  description: This is option C
                - optionIndex: D
                  description: This is option D
              - questionIndex: 3
                description: This is the third question. And it is multiple choice.
                type: multiple
                options:
                - optionIndex: A
                  description: This is option A
                - optionIndex: B
                  description: This is option B
                - optionIndex: C
                  description: This is option C
                - optionIndex: D
                  description: This is option D
        required: true
      responses:
        "200":
          description: successful operation returns the created form template ID
          content:
            application/json:
              schema:
                type: integer
                x-content-type: application/json
        "400":
          description: Invalid Input
      x-openapi-router-controller: swagger_server.controllers.owners_controller
  /owners/{ownerId}/templates/{templateId}:
    get:
      tags:
      - owners
      summary: Find the form with formId for an owner
      description: Returns a single form with the form ID for owner
      operationId: get_form_for_owner
      parameters:
      - name: ownerId
        in: path
        description: ID of the owner
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: templateId
        in: path
        description: ID of form template to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormTemplate'
        "400":
          description: Invalid template ID supplied
        "404":
          description: The template is not found
      x-openapi-router-controller: swagger_server.controllers.owners_controller
  /clients/{clientId}/forms:
    get:
      tags:
      - clients
      summary: Find all forms assignments for a client
      description: Returns form assignments for a client
      operationId: get_all_forms_for_client
      parameters:
      - name: clientId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "501":
          description: Not implemented
      x-openapi-router-controller: swagger_server.controllers.clients_controller
  /clients/{clientId}/forms/{formId}:
    get:
      tags:
      - clients
      summary: Find the completed response of the form with formId for a client
      description: Returns a single form response with the form ID for a client
      operationId: find_form_response_for_client
      parameters:
      - name: clientId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: formId
        in: path
        description: ID of form to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "501":
          description: Not implemented
      x-openapi-router-controller: swagger_server.controllers.clients_controller
    post:
      tags:
      - clients
      summary: Modify the form with the formId
      operationId: complete_form_for_client
      parameters:
      - name: clientId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: formId
        in: path
        description: ID of form to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.clients_controller
components:
  schemas:
    FormTemplate:
      type: object
      properties:
        id:
          type: integer
          format: int32
        ownerId:
          type: integer
          format: int32
        createdAt:
          type: integer
          format: int64
        lastModify:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
      example:
        createdAt: 1
        lastModify: 5
        questions:
        - questionIndex: 2
          createdAt: 9
          lastModify: lastModify
          options:
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          description: description
          id: 5
          templateId: 7
          type: text
        - questionIndex: 2
          createdAt: 9
          lastModify: lastModify
          options:
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          description: description
          id: 5
          templateId: 7
          type: text
        description: description
        id: 0
        ownerId: 6
        title: title
    FormResponse:
      type: object
      properties:
        id:
          type: integer
        clientId:
          type: integer
        templateId:
          type: integer
        createdAt:
          type: string
        lastModify:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    Question:
      type: object
      properties:
        id:
          type: integer
        questionIndex:
          type: integer
        templateId:
          type: integer
        createdAt:
          type: integer
        lastModify:
          type: string
        description:
          type: string
        type:
          type: string
          description: the question type
          enum:
          - text
          - single
          - multiple
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
      example:
        questionIndex: 2
        createdAt: 9
        lastModify: lastModify
        options:
        - createdAt: 4
          questionId: 2
          optionIndex: optionIndex
          lastModify: lastModify
          description: description
          id: 3
        - createdAt: 4
          questionId: 2
          optionIndex: optionIndex
          lastModify: lastModify
          description: description
          id: 3
        description: description
        id: 5
        templateId: 7
        type: text
    Option:
      type: object
      properties:
        id:
          type: integer
        optionIndex:
          type: string
        questionId:
          type: integer
        createdAt:
          type: integer
        lastModify:
          type: string
        description:
          type: string
      example:
        createdAt: 4
        questionId: 2
        optionIndex: optionIndex
        lastModify: lastModify
        description: description
        id: 3
    Answer:
      type: object
      properties:
        id:
          type: integer
        questionId:
          type: integer
        responseId:
          type: integer
        clientId:
          type: integer
        templateId:
          type: integer
        createdAt:
          type: string
        lastModify:
          type: string
        type:
          type: string
          description: the question type
          enum:
          - text
          - single
          - multiple
        response:
          type: string
          description: The response will be used for all types of questions.
    FormAssignment:
      type: object
      properties:
        id:
          type: integer
        ownerId:
          type: integer
        clientId:
          type: integer
        templateId:
          type: integer
        responseId:
          type: integer
        createdAt:
          type: string
        lastModify:
          type: string
        status:
          type: string
          enum:
          - open
          - complete
      description: Representing a form that is assigned from an owner to their client
      example:
        createdAt: createdAt
        clientId: 1
        lastModify: lastModify
        id: 0
        ownerId: 6
        templateId: 5
        responseId: 5
        status: open
    clientId_forms_body:
      type: object
      properties:
        forms:
          type: array
          items:
            type: integer

