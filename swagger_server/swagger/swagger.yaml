openapi: 3.0.0
info:
  title: TAOS API
  description: |
    This is a sample TAOS server.
  contact:
    email: cli94@wisc.edu
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/lichao0817/TAOS/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://petstore.swagger.io/v2
tags:
- name: owners
  description: Everything about accounting firm users.
- name: clients
  description: Everything about accounting firm clients.
paths:
  /owners/{ownerId}/clients:
    post:
      tags:
      - owners
      summary: Find all clients for an owner
      operationId: find_all_clients_for_owner
      parameters:
      - name: ownerId
        in: path
        description: ID of owner
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "501":
          description: Not implemented
      x-openapi-router-controller: swagger_server.controllers.owners_controller
  /owners/{userId}/templates:
    get:
      tags:
      - owners
      summary: Find all form templates for an owner
      description: Returns a single pet
      operationId: get_all_forms_for_owner
      parameters:
      - name: userId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormTemplate'
                x-content-type: application/json
        "400":
          description: Invalid ID supplied
      x-openapi-router-controller: swagger_server.controllers.owners_controller
    post:
      tags:
      - owners
      summary: Add a form for owner
      operationId: add_form
      parameters:
      - name: userId
        in: path
        description: ID of form to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: add a new questionaire template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormTemplate'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormTemplate'
        "400":
          description: Invalid Input
      x-openapi-router-controller: swagger_server.controllers.owners_controller
  /owners/{userId}/templates/{templateId}:
    get:
      tags:
      - owners
      summary: Find the form with formId for an owner
      description: Returns a single form with the form ID for owner
      operationId: get_form_for_owner
      parameters:
      - name: userId
        in: path
        description: ID of the owner
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: templateId
        in: path
        description: ID of form template to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormTemplate'
        "400":
          description: Invalid template ID supplied
        "404":
          description: The template is not found
      x-openapi-router-controller: swagger_server.controllers.owners_controller
  /clients/{userId}/forms:
    get:
      tags:
      - clients
      summary: Find all forms assigned to a client
      description: Returns a single pet
      operationId: get_all_forms_for_client
      parameters:
      - name: userId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "501":
          description: Not implemented
      x-openapi-router-controller: swagger_server.controllers.clients_controller
  /clients/{userId}/forms/{formId}:
    get:
      tags:
      - clients
      summary: Find the form with formId for an owner
      description: Returns a single form with the form ID for owner
      operationId: find_form_for_client
      parameters:
      - name: userId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: formId
        in: path
        description: ID of form to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "501":
          description: Not implemented
      x-openapi-router-controller: swagger_server.controllers.clients_controller
    post:
      tags:
      - clients
      summary: Modify the form with the formId
      operationId: complete_form_for_client
      parameters:
      - name: userId
        in: path
        description: ID of owner to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: formId
        in: path
        description: ID of form to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "405":
          description: Invalid input
      x-openapi-router-controller: swagger_server.controllers.clients_controller
components:
  schemas:
    FormTemplate:
      type: object
      properties:
        id:
          type: integer
          format: int32
        ownerId:
          type: integer
          format: int32
        createdAt:
          type: integer
          format: int64
        lastModify:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
      example:
        createdAt: 1
        lastModify: 5
        questions:
        - questionIndex: 2
          createdAt: 9
          lastModify: lastModify
          options:
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          description: description
          id: 5
          templateId: 7
          type: text
        - questionIndex: 2
          createdAt: 9
          lastModify: lastModify
          options:
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          - createdAt: 4
            questionId: 2
            optionIndex: optionIndex
            lastModify: lastModify
            description: description
            id: 3
          description: description
          id: 5
          templateId: 7
          type: text
        description: description
        id: 0
        ownerId: 6
        title: title
    FormResponse:
      type: object
      properties:
        id:
          type: integer
        clientId:
          type: integer
        templateId:
          type: integer
        createdAt:
          type: string
        lastModify:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    Question:
      type: object
      properties:
        id:
          type: integer
        questionIndex:
          type: integer
        templateId:
          type: integer
        createdAt:
          type: integer
        lastModify:
          type: string
        description:
          type: string
        type:
          type: string
          description: the question type
          enum:
          - text
          - single
          - multiple
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
      example:
        questionIndex: 2
        createdAt: 9
        lastModify: lastModify
        options:
        - createdAt: 4
          questionId: 2
          optionIndex: optionIndex
          lastModify: lastModify
          description: description
          id: 3
        - createdAt: 4
          questionId: 2
          optionIndex: optionIndex
          lastModify: lastModify
          description: description
          id: 3
        description: description
        id: 5
        templateId: 7
        type: text
    Option:
      type: object
      properties:
        id:
          type: integer
        optionIndex:
          type: string
        questionId:
          type: integer
        createdAt:
          type: integer
        lastModify:
          type: string
        description:
          type: string
      example:
        createdAt: 4
        questionId: 2
        optionIndex: optionIndex
        lastModify: lastModify
        description: description
        id: 3
    Answer:
      type: object
      properties:
        id:
          type: integer
        questionId:
          type: integer
        clientId:
          type: integer
        templateId:
          type: integer
        createdAt:
          type: string
        lastModify:
          type: string
        type:
          type: string
          description: the question type
          enum:
          - text
          - single
          - multiple
        response:
          type: string
          description: The response will be used for all types of questions.

